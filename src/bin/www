#!/usr/bin/env node

/**
 * Module dependencies.
 */
const app = require('../api');
const http = require('http');
const config = require('../lib/config');
const logger = require('../lib/logger');

process.env.DEBUG = '*';

//XXX
//require('https').globalAgent.options.ca = require('ssl-root-cas/latest').create();

/**
 * Get port from environment and store in Express.
 */
const port = normalizePort(config.api.port || '3000');
app.set('port', port);

/**
 * Create HTTP server.
 */
const server = http.createServer(app);

/**
 * Listen on provided port, on all network interfaces.
 */
server.listen(port);
server.on('error', onError);
server.on('listening', onListening);

/**
 * Normalize a port into a number, string, or false.
 */
function normalizePort (val) {
  const port = parseInt(val, 10);

  if (isNaN(port)) {
    // named pipe
    return val;
  }

  if (port >= 0) {
    // port number
    return port;
  }

  return false;
}

/**
 * Event listener for HTTP server "error" event.
 */
function onError (error) {
  if (error.syscall !== 'listen') {
    throw error;
  }

  const bind = typeof port === 'string' ? `Pipe ${port}` : `Port ${port}`;

  logger.info(error.code);
  logger.info(error);

  // handle specific listen errors with friendly messages
  switch (error.code) {
  case 'EACCES':
    logger.fatal(`${bind} requires elevated privileges`);
    process.exit(1);
    break;
  case 'EADDRINUSE':
    logger.fatal(`${bind} is already in use`);
    process.exit(1);
    break;
  default:
    throw error;
  }
}

let ltijs = require('../lib/lti/tool');

/**
 * Event listener for HTTP server "listening" event.
 */
async function onListening () {
  logger.info("SERVER STARTED");
  
  const addr = server.address();
  const bind = typeof addr === 'string' ? `pipe ${addr}` : `port ${addr.port}`;
  logger.debug(`Listening on ${bind}`);

  await ltijs.setup();

  logger.info(ltijs.provider.appRoute());
  logger.info(ltijs.provider.loginRoute());
  logger.info(ltijs.provider.keysetRoute());
  logger.info(ltijs.provider.dynRegRoute());
}
